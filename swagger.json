{
  "swagger": "2.0",
  "info": {
    "version": "2.0.1",
    "title": "VDV"
  },
  "host": "127.0.0.1:4201",
  "basePath": "/vdv",
  "tags": [
    {
      "name": "user API",
      "description": "Unlocked user API functions",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "special users API",
      "description": "API for special users",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "court API",
      "description": "Unlocked court API functions",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "request API",
      "description": "Unlocked request API functions",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "court time API",
      "description": "Unlocked request API functions",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "location API",
      "description": "Unlocked location API functions",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "court",
      "description": "Everything about court",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "sport",
      "description": "Everything about sport",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "equipment",
      "description": "Everything about equipment",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "user",
      "description": "Everything about users",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "special users",
      "description": "Everything about users",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "request",
      "description": "Everything about users",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "media",
      "description": "Everything about medias",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "location",
      "description": "Everything about locations",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/initDatabase": {
      "post": {
        "summary": "Initialize VDV database",
        "description": "Creates default parameters",
        "operationId": "initDatabase",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/cleanupDatabase": {
      "post": {
        "summary": "Cleanup VDV database",
        "description": "Cleans DB up of old and obsolete data",
        "operationId": "cleanupDatabase",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/version": {
      "get": {
        "summary": "Returns current project version",
        "description": "Returns current project version",
        "operationId": "getVersion",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/court": {
      "post": {
        "tags": [
          "court"
        ],
        "summary": "Create a new court(ready)",
        "description": "",
        "operationId": "createCourt",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "new_court",
            "in": "body",
            "description": "Court encoded in JSON string",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Court"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Validation exception"
          },
          "412": {
            "description": "Name already taken"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      },
      "put": {
        "tags": [
          "court"
        ],
        "summary": "Update existing catalog info(ready)",
        "description": "",
        "operationId": "updateCourt",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "new_court",
            "in": "body",
            "description": "Court encoded in JSON string",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Court"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Court not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/court/filter": {
      "get": {
        "tags": [
          "court"
        ],
        "summary": "Get all courts with filter(ready)",
        "description": "Returns a list of courts descriptions",
        "operationId": "getAllCourts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "filter by",
            "required": true,
            "type": "string",
            "enum": [
              "all",
              "my",
              "notmy"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "407": {
            "description": "problems to get landlordid",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "408": {
            "description": "problems with filter",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/court/{courtId}": {
      "get": {
        "tags": [
          "court"
        ],
        "summary": "Find court by ID(ready)",
        "description": "Returns a court description",
        "operationId": "getCourtById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "courtId",
            "in": "path",
            "description": "ID of court to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Court"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Court not found"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      },
      "delete": {
        "tags": [
          "court"
        ],
        "summary": "Remove court(ready)",
        "description": "",
        "operationId": "deleteCourt",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "courtId",
            "in": "path",
            "description": "Court id to unlink",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "hard",
            "in": "query",
            "description": "Hard-delete (no undo)",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Court not found"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/court/landlord/{landlordId}": {
      "get": {
        "tags": [
          "court"
        ],
        "summary": "Find court by landlord ID(ready)",
        "description": "Returns a court description",
        "operationId": "getCourtByLandlordId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "landlordId",
            "in": "path",
            "description": "ID of landlord to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Court"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Landlord not found"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/courts/times": {
      "get": {
        "tags": [
          "court"
        ],
        "summary": "Get court times by landlord ID(ready)",
        "description": "Returns court times for date",
        "operationId": "getTimesForDate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "courtid",
            "in": "query",
            "description": "ID of court",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "date",
            "in": "query",
            "description": "ID of court",
            "required": true,
            "type": "string",
            "example": "2018-03-28"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Time"
            }
          },
          "400": {
            "description": "Invalid court ID supplied"
          },
          "404": {
            "description": "Court not found"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },

    "/user": {
      "post": {
        "tags": [
          "user",
          "user API"
        ],
        "summary": "Create a new account(ready)",
        "description": "",
        "operationId": "createAccount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "new_user",
            "in": "body",
            "description": "User encoded in JSON string",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Validation exception"
          },
          "412": {
            "description": "Phone already exists"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      },
      "put": {
        "tags": [
          "user",
          "user API"
        ],
        "summary": "Update existing catalog info(ready)",
        "description": "",
        "operationId": "updateUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "new_user",
            "in": "body",
            "description": "User encoded in JSON string",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/user/all": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get all users(ready)",
        "description": "Returns a list of courts descriptions",
        "operationId": "getAllUsers",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/user/me": {
      "get": {
        "tags": [
          "user",
          "user API"
        ],
        "summary": "Get my user info(ready)",
        "description": "Returns an info of currently authorized user",
        "operationId": "getMyUser",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/user/{userId}": {
      "get": {
        "tags": [
          "user",
          "user API"
        ],
        "summary": "Find user by ID(ready)",
        "description": "Returns a user description",
        "operationId": "getUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      },
      "delete": {
        "tags": [
          "user",
          "user API"
        ],
        "summary": "Remove court(ready)",
        "description": "deleteUser (can only be applied to authorized user)",
        "operationId": "deleteUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id to unlink",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "hard",
            "in": "query",
            "description": "Hard-delete (no undo)",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/landlord": {
      "post": {
        "tags": [
          "special users API"
        ],
        "summary": "Create a landlord(ready)",
        "description": "Create a landlord",
        "operationId": "createLandlord",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "new_landlord",
            "in": "body",
            "description": "User encoded in JSON string",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LandLord"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "405": {
            "description": "Validation exception"
          },
          "412": {
            "description": "Account with given id already has spacial user"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      },
      "put": {
        "tags": [
          "special users API"
        ],
        "summary": "Update a landlord(ready)",
        "description": "Update a landlord",
        "operationId": "updateLandlord",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "landlord",
            "in": "body",
            "description": "User encoded in JSON string",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LandLord"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "405": {
            "description": "Validation exception"
          },
          "412": {
            "description": "Account with given id already has spacial user"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/landlord/{landlordId}": {
      "get": {
        "tags": [
          "special users API"
        ],
        "summary": "Get landlord by ID(ready)",
        "description": "Returns a landlord item",
        "operationId": "getLandlord",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "landlordId",
            "in": "path",
            "description": "ID of landlord to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Landlord"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Landlord not found"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      },
      "delete": {
        "tags": [
          "landlord"
        ],
        "summary": "Remove landlord item",
        "description": "",
        "operationId": "deleteLandlord",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "landlordId",
            "in": "path",
            "description": "Landlord id to unlink",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Landlord not found"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/request": {
      "post": {
        "tags": [
          "request API"
        ],
        "summary": "Create a new request(ready)",
        "description": "",
        "operationId": "createRequest",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "new_request",
            "in": "body",
            "description": "Request encoded in JSON string",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Validation exception"
          },
          "411": {
            "description": "Given court or user doesn't exists"
          },
          "412": {
            "description": "Time already taken"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/request/allByUser/{userId}": {
      "get": {
        "tags": [
          "request",
          "request API"
        ],
        "summary": "Get all user requests(ready)",
        "description": "Returns a requests of specified user",
        "operationId": "getAllUserRequests",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of user",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/request/allByCourt/{courtId}": {
      "get": {
        "tags": [
          "request",
          "request API"
        ],
        "summary": "Get all requests on court(ready)",
        "description": "Returns a requests of specified court",
        "operationId": "getAllCourtRequests",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "courtId",
            "in": "path",
            "description": "ID of court",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/request/{requestId}": {
      "delete": {
        "tags": [
          "request",
          "request API"
        ],
        "summary": "Remove request item(ready)",
        "description": "",
        "operationId": "deleteRequest",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "Court id to unlink",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Request not found"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/request/confirm/{requestid}": {
      "post": {
         "tags": [
          "request",
          "request API"
        ],
        "summary": "Confirm request item(ready)",
        "description": "",
        "operationId": "confirmRequest",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestid",
            "in": "path",
            "description": "Court id to confirm",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Request not found"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/request/decline/{requestid}": {
      "post": {
         "tags": [
          "request",
          "request API"
        ],
        "summary": "Confirm request item(ready)",
        "description": "",
        "operationId": "declineRequest",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestid",
            "in": "path",
            "description": "Court id to decline",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Request not found"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/time": {
      "post": {
        "tags": [
          "court time API"
        ],
        "summary": "Create a new court time",
        "description": "",
        "operationId": "createTime",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "new_request",
            "in": "body",
            "description": "Court time encoded in JSON string",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Validation exception"
          },
          "412": {
            "description": "Time already taken"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      },
      "delete": {
        "tags": [
          "court time API"
        ],
        "summary": "Remove time item",
        "description": "",
        "operationId": "deleteTime",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "timeId",
            "in": "path",
            "description": "time id to unlink",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Time not found"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/media": {
      "post": {
        "tags": [
          "media"
        ],
        "summary": "Create a new media item(ready)",
        "description": "",
        "operationId": "createMedia",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "formData",
            "description": "desired type",
            "required": true,
            "type": "string",
            "enum": [
              "image",
              "equipment"
            ]
          },
          {
            "name": "name",
            "in": "formData",
            "description": "desired name",
            "required": false,
            "type": "string"
          },
          {
            "name": "desc",
            "in": "formData",
            "description": "desired desc",
            "required": false,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "File contents (Possible to use multiple files, up to 10)",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/media/{ownerId}/all": {
      "get": {
        "tags": [
          "media"
        ],
        "summary": "Get all courts(ready)",
        "description": "Returns a list of owners media descriptors",
        "operationId": "getAllOwnerMedias",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ownerId",
            "in": "path",
            "description": "ID of court to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/media/{mediaId}": {
      "get": {
        "tags": [
          "media"
        ],
        "summary": "Get media by ID(ready)",
        "description": "Returns a media item",
        "operationId": "getMedia",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mediaId",
            "in": "path",
            "description": "ID of court to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Media"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Court not found"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      },
      "delete": {
        "tags": [
          "media"
        ],
        "summary": "Remove media item",
        "description": "",
        "operationId": "deleteMedia",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "mediaId",
            "in": "path",
            "description": "Court id to unlink",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Media not found"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/location": {
      "post": {
        "tags": [
          "location",
          "location API"
        ],
        "summary": "Create a new location(ready)",
        "description": "",
        "operationId": "createLocation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "new_location",
            "in": "body",
            "description": "Court encoded in JSON string",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Location"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Validation exception"
          },
          "412": {
            "description": "Name already taken"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/location/all": {
      "get": {
        "tags": [
          "location API"
        ],
        "summary": "Get all locations(ready)",
        "description": "Returns a list of locations descriptions",
        "operationId": "getAllLocations",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
     "/location/inarea": {
      "get": {
        "tags": [
          "location API"
        ],
        "summary": "Get locations in area(ready)",
        "description": "Returns a list of locations descriptions",
        "operationId": "getLocationsInArea",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "radius",
            "in": "query",
            "description": "area radius",
            "required": false,
            "type": "float"
          },
          {
            "name": "x",
            "in": "query",
            "description": "center x",
            "required": false,
            "type": "float"
          },
          {
            "name": "y",
            "in": "query",
            "description": "center y",
            "required": false,
            "type": "float"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "type": "array",
            "items": {
              "schema": {
                "$ref": "#/definitions/ApiResponse"
              }
            }
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/location/{locId}": {
      "get": {
        "tags": [
          "location API"
        ],
        "summary": "Find location by ID(ready)",
        "description": "Returns a location data",
        "operationId": "getLocationById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "locId",
            "in": "path",
            "description": "ID of location to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "type": "array",
            "schema": {
              "$ref": "#/definitions/Location"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Location not found"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      },
      "delete": {
        "tags": [
          "location"
        ],
        "summary": "Remove location(ready)",
        "description": "",
        "operationId": "deleteLocation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "locId",
            "in": "path",
            "description": "Court id to unlink",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Location not found"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/sport": {
      "post": {
        "tags": [
          "sport"
        ],
        "summary": "Create a new sport(ready)",
        "description": "",
        "operationId": "createSport",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "new_sport",
            "in": "body",
            "description": "Comment encoded in JSON string",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Sport"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Validation exception"
          },
          "412": {
            "description": "Name already taken"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      },
      "get": {
        "tags": [
          "sport"
        ],
        "summary": "Find all available sports(ready)",
        "description": "Returns a sports data",
        "operationId": "getSports",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/sport/{sportId}": {
      "get": {
        "tags": [
          "sport"
        ],
        "summary": "Find sport by ID(ready)",
        "description": "Returns a sport description",
        "operationId": "getSportById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sportId",
            "in": "path",
            "description": "ID of sport to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Sport"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Court not found"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      },
      "delete": {
        "tags": [
          "sport"
        ],
        "summary": "Remove sport(ready)",
        "description": "",
        "operationId": "deleteSport",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sportId",
            "in": "path",
            "description": "Sport id to unlink",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "hard",
            "in": "query",
            "description": "Hard-delete (no undo)",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Sport not found"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/equipment": {
      "post": {
        "tags": [
          "equipment"
        ],
        "summary": "Create equipment(ready)",
        "description": "",
        "operationId": "createEquipment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "new_equipment",
            "in": "body",
            "description": "Comment encoded in JSON string",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Equipment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          },
          "405": {
            "description": "Validation exception"
          },
          "412": {
            "description": "Name already taken"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      },
      "get": {
        "tags": [
          "equipment"
        ],
        "summary": "Find all available equipments(ready)",
        "description": "Returns a equipments data",
        "operationId": "getEquipments",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/equipment/{equipmentId}": {
      "get": {
        "tags": [
          "equipment"
        ],
        "summary": "Find equipment by ID(ready)",
        "description": "Returns a equipment description",
        "operationId": "getEquipmentById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "ID of sport to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Equipment"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Court not found"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      },
      "delete": {
        "tags": [
          "equipment"
        ],
        "summary": "Remove equipment(ready)",
        "description": "",
        "operationId": "deleteEquipment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "equipmentId",
            "in": "path",
            "description": "Equipment id to unlink",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "hard",
            "in": "query",
            "description": "Hard-delete (no undo)",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Equipment not found"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/sendkey": {
      "post": {
        "tags": [
          "login"
        ],
        "summary": "Send validation key on phone(ready)",
        "description": "",
        "operationId": "sendkey",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "phone",
            "type": "string",
            "description": "A person's phone."
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "405": {
            "description": "Validation exception"
          },
          "411": {
            "description": "There is no account with given phone"
          },
          "412": {
            "description": "Key can not be send"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    },
    "/validate": {
      "post": {
        "tags": [
          "login"
        ],
        "summary": "Check key and generate token(ready)",
        "operationId": "validate",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "key",
            "type": "string",
            "description": "A person's key."
          },
          {
            "in": "formData",
            "name": "phone",
            "type": "string",
            "description": "A person's phone."
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          },
          "405": {
            "description": "Validation exception"
          },
          "406": {
            "description": "There was no key send on given phone"
          },
          "411": {
            "description": "There is no accounts with given phone"
          }
        },
        "security": [
          {
            "auth_env": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "auth_env": {
      "type": "apiKey",
      "in": "header",
      "name": "API-Token"
    }
  },
  "definitions": {
    "Account": {
      "type": "object",
      "required": [
        "name",
        "phone"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "Максимов Михаил Александрович"
        },
        "phone": {
          "type": "string",
          "example": "79315839083"
        },
        "mediaid": {
          "type": "integer",
          "format": "int64"
        },
        "created": {
          "type": "string",
          "example": "2018-03-28 20:24:00+00:00"
        },
        "updated": {
          "type": "string",
          "example": "2018-03-28 20:24:00+00:00"
        },
        "e_mail": {
          "type": "string",
          "example": "maximov@itsociety.su"
        },
        "password": {
          "type": "string",
          "example": "12345678"
        },
        "account_type": {
          "type": "string",
          "example": "landlord/admin/coach/simpleuser"
        }
      }
    },
    "LandLord": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "accountid": {
          "type": "integer",
          "format": "int64"
        },
        "money": {
          "type": "integer",
          "format": "int32"
        },
        "isentity": {
          "type": "boolean"
        },
        "company": {
          "type": "string",
          "example": "Fitness house"
        }
      }
    },
    "Court": {
      "type": "object",
      "required": [
        "ownerid",
        "price",
        "time_begin",
        "months",
        "request_time"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "ownerid": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "Workout"
        },
        "desc": {
          "type": "string",
          "example": "Very cool workout place"
        },
        "price": {
          "type": "integer",
          "format": "int64"
        },
        "time_begin": {
          "type": "string",
          "example": "2018-03-28 20:24:00+00:00"
        },
        "months": {
          "type": "integer",
          "example": "3/6/12"
        },
        "request_time": {
          "type": "string",
          "example": "2018-03-28 20:24:00+00:00"
        },
        "ispublished": {
          "type": "boolean",
          "example": true
        },
        "created": {
          "type": "string",
          "example": "2018-03-28 20:24:00+00:00"
        },
        "updated": {
          "type": "string",
          "example": "2018-03-28 20:24:00+00:00"
        },
        "prop": {
          "type": "object",
          "properties": {
            "media": {
              "type": "array",
                "type": "integer",
                "example": "media_id"
              },
            "equipment": {
              "type": "array",
              "items": {
                "type": "integer",
                "example": "equipment_id"
              }
            },
            "location": {
              "type": "integer",
              "example": 0
            },
            "court_time": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "2019-01-30 19:00:00+00"
              }
            }
          }
        }
      }
    },
    "Time": {
      "type": "object",
      "required": [
        "state",
        "time"
      ],
      "properties": {
        "state": {
          "type": "string",
          "example": "free/rented/active peding(peting, pending)"
        },
        "time": {
          "type": "string",
          "example": "2018-03-28 20:00:00+00:00"
        }
      }
    },
    "Request": {
      "type" : "array",
      "items": {
        "type": "object",
        "required": [
          "accountid",
          "courtid",
          "ownertype"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "accountid": {
            "type": "integer",
            "example": "0"
          },
          "courtid": {
            "type": "integer",
            "example": "0"
          },
          "isconfirmed": {
            "type": "boolean",
            "example": "false"
          },
          "ownertype": {
            "type": "string",
            "example": "simpleuser/coach"
          },
          "requestid": {
            "type": "integer",
            "example": "0"
          },
          "prop": {
            "type": "object",
            "properties": {
              "request_time": {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "2019-01-30 19:00:00+00"
                }
              }
            }
          }
        }
      }
    },
    "Media": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "type": "string",
          "example": "enum: [image, video, text]"
        },
        "storage": {
          "type": "string",
          "example": "enum: [internal, external]"
        },
        "url": {
          "type": "string",
          "example": "https://youtube.com/supervideo/542341"
        },
        "created": {
          "type": "string",
          "example": "2018-03-28 20:24:00+00:00"
        },
        "updated": {
          "type": "string",
          "example": "2018-03-28 20:24:00+00:00"
        }
      }
    },
    "Location": {
      "type": "object",
      "required": [
        "latitude",
        "longitude"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "Super club Huba Buba"
        },
        "latitude": {
          "type": "number",
          "format": "float",
          "example": 40.7127753
        },
        "longitude": {
          "type": "number",
          "format": "float",
          "example": -74.0059728
        }
      }
    },
    "Sport": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "Footboll"
        }
      }
    },
    "Equipment": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "Ball"
        }
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}